//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	schedulingv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/scheduling/v1alpha1"
)

// PlacementLister helps list schedulingv1alpha1.Placement.
// All objects returned here must be treated as read-only.
type PlacementClusterLister interface {
	// List lists all schedulingv1alpha1.Placement in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1alpha1.Placement, err error)

	// Cluster returns an object that can list and get schedulingv1alpha1.Placement from the given logical cluster.
	Cluster(cluster logicalcluster.Name) PlacementLister
}

// placementClusterLister implements the PlacementClusterLister interface.
type placementClusterLister struct {
	indexer cache.Indexer
}

// NewPlacementClusterLister returns a new PlacementClusterLister.
func NewPlacementClusterLister(indexer cache.Indexer) PlacementClusterLister {
	return &placementClusterLister{indexer: indexer}
}

// List lists all schedulingv1alpha1.Placement in the indexer.
func (s *placementClusterLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Placement, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*schedulingv1alpha1.Placement))
	})
	return ret, err
}

// Cluster returns an object that can list and get schedulingv1alpha1.Placement.
func (s *placementClusterLister) Cluster(cluster logicalcluster.Name) PlacementLister {
	return &placementLister{indexer: s.indexer, cluster: cluster}
}

// PlacementLister helps list schedulingv1alpha1.Placement.
// All objects returned here must be treated as read-only.
type PlacementLister interface {
	// List lists all schedulingv1alpha1.Placement in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1alpha1.Placement, err error)
	// Get retrieves the schedulingv1alpha1.Placement from the indexer for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*schedulingv1alpha1.Placement, error)
}

// placementLister implements the PlacementLister interface.
type placementLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all schedulingv1alpha1.Placement in the indexer.
func (s *placementLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Placement, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*schedulingv1alpha1.Placement)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the schedulingv1alpha1.Placement from the indexer for a given name.
func (s placementLister) Get(name string) (*schedulingv1alpha1.Placement, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(schedulingv1alpha1.Resource("placement"), name)
	}
	return obj.(*schedulingv1alpha1.Placement), nil
}
