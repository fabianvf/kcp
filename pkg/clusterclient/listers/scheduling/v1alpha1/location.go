//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	schedulingv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/scheduling/v1alpha1"
)

// LocationLister helps list schedulingv1alpha1.Location.
// All objects returned here must be treated as read-only.
type LocationClusterLister interface {
	// List lists all schedulingv1alpha1.Location in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error)

	// Cluster returns an object that can list and get schedulingv1alpha1.Location from the given logical cluster.
	Cluster(cluster logicalcluster.Name) LocationLister
}

// locationClusterLister implements the LocationClusterLister interface.
type locationClusterLister struct {
	indexer cache.Indexer
}

// NewLocationClusterLister returns a new LocationClusterLister.
func NewLocationClusterLister(indexer cache.Indexer) LocationClusterLister {
	return &locationClusterLister{indexer: indexer}
}

// List lists all schedulingv1alpha1.Location in the indexer.
func (s *locationClusterLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*schedulingv1alpha1.Location))
	})
	return ret, err
}

// Cluster returns an object that can list and get schedulingv1alpha1.Location.
func (s *locationClusterLister) Cluster(cluster logicalcluster.Name) LocationLister {
	return &locationLister{indexer: s.indexer, cluster: cluster}
}

// LocationLister helps list schedulingv1alpha1.Location.
// All objects returned here must be treated as read-only.
type LocationLister interface {
	// List lists all schedulingv1alpha1.Location in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error)
	// Get retrieves the schedulingv1alpha1.Location from the indexer for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*schedulingv1alpha1.Location, error)
}

// locationLister implements the LocationLister interface.
type locationLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all schedulingv1alpha1.Location in the indexer.
func (s *locationLister) List(selector labels.Selector) (ret []*schedulingv1alpha1.Location, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*schedulingv1alpha1.Location)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the schedulingv1alpha1.Location from the indexer for a given name.
func (s locationLister) Get(name string) (*schedulingv1alpha1.Location, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(schedulingv1alpha1.Resource("location"), name)
	}
	return obj.(*schedulingv1alpha1.Location), nil
}
