//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
)

// ClusterWorkspaceTypeLister helps list tenancyv1alpha1.ClusterWorkspaceType.
// All objects returned here must be treated as read-only.
type ClusterWorkspaceTypeClusterLister interface {
	// List lists all tenancyv1alpha1.ClusterWorkspaceType in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspaceType, err error)

	// Cluster returns an object that can list and get tenancyv1alpha1.ClusterWorkspaceType from the given logical cluster.
	Cluster(cluster logicalcluster.Name) ClusterWorkspaceTypeLister
}

// clusterWorkspaceTypeClusterLister implements the ClusterWorkspaceTypeClusterLister interface.
type clusterWorkspaceTypeClusterLister struct {
	indexer cache.Indexer
}

// NewClusterWorkspaceTypeClusterLister returns a new ClusterWorkspaceTypeClusterLister.
func NewClusterWorkspaceTypeClusterLister(indexer cache.Indexer) ClusterWorkspaceTypeClusterLister {
	return &clusterWorkspaceTypeClusterLister{indexer: indexer}
}

// List lists all tenancyv1alpha1.ClusterWorkspaceType in the indexer.
func (s *clusterWorkspaceTypeClusterLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspaceType, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tenancyv1alpha1.ClusterWorkspaceType))
	})
	return ret, err
}

// Cluster returns an object that can list and get tenancyv1alpha1.ClusterWorkspaceType.
func (s *clusterWorkspaceTypeClusterLister) Cluster(cluster logicalcluster.Name) ClusterWorkspaceTypeLister {
	return &clusterWorkspaceTypeLister{indexer: s.indexer, cluster: cluster}
}

// ClusterWorkspaceTypeLister helps list tenancyv1alpha1.ClusterWorkspaceType.
// All objects returned here must be treated as read-only.
type ClusterWorkspaceTypeLister interface {
	// List lists all tenancyv1alpha1.ClusterWorkspaceType in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspaceType, err error)
	// Get retrieves the tenancyv1alpha1.ClusterWorkspaceType from the indexer for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*tenancyv1alpha1.ClusterWorkspaceType, error)
}

// clusterWorkspaceTypeLister implements the ClusterWorkspaceTypeLister interface.
type clusterWorkspaceTypeLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all tenancyv1alpha1.ClusterWorkspaceType in the indexer.
func (s *clusterWorkspaceTypeLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspaceType, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tenancyv1alpha1.ClusterWorkspaceType)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the tenancyv1alpha1.ClusterWorkspaceType from the indexer for a given name.
func (s clusterWorkspaceTypeLister) Get(name string) (*tenancyv1alpha1.ClusterWorkspaceType, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tenancyv1alpha1.Resource("clusterWorkspaceType"), name)
	}
	return obj.(*tenancyv1alpha1.ClusterWorkspaceType), nil
}
