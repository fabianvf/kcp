//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	tenancyv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/tenancy/v1alpha1"
)

// ClusterWorkspaceLister helps list tenancyv1alpha1.ClusterWorkspace.
// All objects returned here must be treated as read-only.
type ClusterWorkspaceClusterLister interface {
	// List lists all tenancyv1alpha1.ClusterWorkspace in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspace, err error)

	// Cluster returns an object that can list and get tenancyv1alpha1.ClusterWorkspace from the given logical cluster.
	Cluster(cluster logicalcluster.Name) ClusterWorkspaceLister
}

// clusterWorkspaceClusterLister implements the ClusterWorkspaceClusterLister interface.
type clusterWorkspaceClusterLister struct {
	indexer cache.Indexer
}

// NewClusterWorkspaceClusterLister returns a new ClusterWorkspaceClusterLister.
func NewClusterWorkspaceClusterLister(indexer cache.Indexer) ClusterWorkspaceClusterLister {
	return &clusterWorkspaceClusterLister{indexer: indexer}
}

// List lists all tenancyv1alpha1.ClusterWorkspace in the indexer.
func (s *clusterWorkspaceClusterLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspace, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*tenancyv1alpha1.ClusterWorkspace))
	})
	return ret, err
}

// Cluster returns an object that can list and get tenancyv1alpha1.ClusterWorkspace.
func (s *clusterWorkspaceClusterLister) Cluster(cluster logicalcluster.Name) ClusterWorkspaceLister {
	return &clusterWorkspaceLister{indexer: s.indexer, cluster: cluster}
}

// ClusterWorkspaceLister helps list tenancyv1alpha1.ClusterWorkspace.
// All objects returned here must be treated as read-only.
type ClusterWorkspaceLister interface {
	// List lists all tenancyv1alpha1.ClusterWorkspace in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspace, err error)
	// Get retrieves the tenancyv1alpha1.ClusterWorkspace from the indexer for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*tenancyv1alpha1.ClusterWorkspace, error)
}

// clusterWorkspaceLister implements the ClusterWorkspaceLister interface.
type clusterWorkspaceLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all tenancyv1alpha1.ClusterWorkspace in the indexer.
func (s *clusterWorkspaceLister) List(selector labels.Selector) (ret []*tenancyv1alpha1.ClusterWorkspace, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*tenancyv1alpha1.ClusterWorkspace)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the tenancyv1alpha1.ClusterWorkspace from the indexer for a given name.
func (s clusterWorkspaceLister) Get(name string) (*tenancyv1alpha1.ClusterWorkspace, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(tenancyv1alpha1.Resource("clusterWorkspace"), name)
	}
	return obj.(*tenancyv1alpha1.ClusterWorkspace), nil
}
