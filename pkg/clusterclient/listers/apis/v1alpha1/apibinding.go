//go:build !ignore_autogenerated
// +build !ignore_autogenerated

/*
Copyright The KCP Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by kcp code-generator. DO NOT EDIT.

package v1alpha1

import (
	apimachinerycache "github.com/kcp-dev/apimachinery/pkg/cache"
	"github.com/kcp-dev/logicalcluster"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	apisv1alpha1 "github.com/kcp-dev/kcp/pkg/apis/apis/v1alpha1"
)

// APIBindingLister helps list apisv1alpha1.APIBinding.
// All objects returned here must be treated as read-only.
type APIBindingClusterLister interface {
	// List lists all apisv1alpha1.APIBinding in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apisv1alpha1.APIBinding, err error)

	// Cluster returns an object that can list and get apisv1alpha1.APIBinding from the given logical cluster.
	Cluster(cluster logicalcluster.Name) APIBindingLister
}

// aPIBindingClusterLister implements the APIBindingClusterLister interface.
type aPIBindingClusterLister struct {
	indexer cache.Indexer
}

// NewAPIBindingClusterLister returns a new APIBindingClusterLister.
func NewAPIBindingClusterLister(indexer cache.Indexer) APIBindingClusterLister {
	return &aPIBindingClusterLister{indexer: indexer}
}

// List lists all apisv1alpha1.APIBinding in the indexer.
func (s *aPIBindingClusterLister) List(selector labels.Selector) (ret []*apisv1alpha1.APIBinding, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*apisv1alpha1.APIBinding))
	})
	return ret, err
}

// Cluster returns an object that can list and get apisv1alpha1.APIBinding.
func (s *aPIBindingClusterLister) Cluster(cluster logicalcluster.Name) APIBindingLister {
	return &aPIBindingLister{indexer: s.indexer, cluster: cluster}
}

// APIBindingLister helps list apisv1alpha1.APIBinding.
// All objects returned here must be treated as read-only.
type APIBindingLister interface {
	// List lists all apisv1alpha1.APIBinding in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*apisv1alpha1.APIBinding, err error)
	// Get retrieves the apisv1alpha1.APIBinding from the indexer for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*apisv1alpha1.APIBinding, error)
}

// aPIBindingLister implements the APIBindingLister interface.
type aPIBindingLister struct {
	indexer cache.Indexer
	cluster logicalcluster.Name
}

// List lists all apisv1alpha1.APIBinding in the indexer.
func (s *aPIBindingLister) List(selector labels.Selector) (ret []*apisv1alpha1.APIBinding, err error) {
	selectAll := selector == nil || selector.Empty()

	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", "")
	list, err := s.indexer.ByIndex(apimachinerycache.ClusterIndexName, key)
	if err != nil {
		return nil, err
	}

	for i := range list {
		obj := list[i].(*apisv1alpha1.APIBinding)
		if selectAll {
			ret = append(ret, obj)
		} else {
			if selector.Matches(labels.Set(obj.GetLabels())) {
				ret = append(ret, obj)
			}
		}
	}

	return ret, err
}

// Get retrieves the apisv1alpha1.APIBinding from the indexer for a given name.
func (s aPIBindingLister) Get(name string) (*apisv1alpha1.APIBinding, error) {
	key := apimachinerycache.ToClusterAwareKey(s.cluster.String(), "", name)
	obj, exists, err := s.indexer.GetByKey(key)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(apisv1alpha1.Resource("aPIBinding"), name)
	}
	return obj.(*apisv1alpha1.APIBinding), nil
}
